    int findK(int A[], int na, int B[], int nb, int k){
        if(na < nb){
            return findK(B, nb, A, na, k);
        }
        if(nb == 0){
            return A[k-1];
        }
        if(k==1){
            return A[0] < B[0] ? A[0] : B[0];
        }
        int indb = (k/2-1) < (nb-1) ? (k/2-1) : (nb-1);
        int inda = k - indb - 2;
        if(A[inda] < B[indb]){
            return findK(A+inda+1, na-inda-1, B, nb, k-inda-1);
        }
        else if(A[inda] > B[indb]){
            return findK(A, na, B+indb+1, nb-indb-1, k-indb-1);
        }
        else{
            return A[inda];
        }
    }



    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int sum = m + n;
        if(sum%2 == 0){
            float res = findK(A, m, B, n, sum/2) + findK(A, m, B, n, sum/2+1);
            return res/2.0f;
        }
        else{
            return findK(A, m, B, n, sum/2 + 1);
        }
    }